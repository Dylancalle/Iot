#include <WiFi.h>
#include <WiFiClientSecure.h>
#include <PubSubClient.h>
#include <ArduinoJson.h>
#define TRIGGER_PIN 2
#define ECHO_PIN 3

String classifyValue(float value) {
    if (value <= 30.0f && value >= 0.0f) {
        return "nothing";
    } else if (value <= 60.0f && value > 30.0f) {
        return "little";
    } else if (value <= 200.0f && value > 60.0f) {
        return "enough";
    } else if (value > 200.0f ){
        return "overflowing";
    }
}

float medirDistanciaCM() {
  // Enviar pulso de 10us al TRIGGER
  digitalWrite(TRIGGER_PIN, LOW);
  delayMicroseconds(2);
  digitalWrite(TRIGGER_PIN, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIGGER_PIN, LOW);

  // Leer el tiempo de respuesta en ECHO
  long duracion = pulseIn(ECHO_PIN, HIGH);

  // Calcular distancia (cm)
  float distancia = duracion * 0.034 / 2;
  return distancia;
}

// Funci√≥n que muestra la distancia por Serial
void mostrarDistancia(float distancia) {
  Serial.print("Distancia: ");
  Serial.print(distancia);
  Serial.println(" cm");
}

const int LED = 2;

const char* WIFI_SSID = "FAMILIA CALLE";
const char* WIFI_PASS = "7336660-1V";

// Replace with your MQTT broker details
const char* MQTT_BROKER = "a2dbaocrje4klj-ats.iot.us-east-2.amazonaws.com"; // changeMe
const int MQTT_PORT = 8883;
const char* CLIENT_ID = "ESP-32";

const char AMAZON_ROOT_CA1[] PROGMEM = R"EOF(
-----BEGIN CERTIFICATE-----
MIIDQTCCAimgAwIBAgITBmyfz5m/jAo54vB4ikPmljZbyjANBgkqhkiG9w0BAQsF
ADA5MQswCQYDVQQGEwJVUzEPMA0GA1UEChMGQW1hem9uMRkwFwYDVQQDExBBbWF6
b24gUm9vdCBDQSAxMB4XDTE1MDUyNjAwMDAwMFoXDTM4MDExNzAwMDAwMFowOTEL
MAkGA1UEBhMCVVMxDzANBgNVBAoTBkFtYXpvbjEZMBcGA1UEAxMQQW1hem9uIFJv
b3QgQ0EgMTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALJ4gHHKeNXj
ca9HgFB0fW7Y14h29Jlo91ghYPl0hAEvrAIthtOgQ3pOsqTQNroBvo3bSMgHFzZM
9O6II8c+6zf1tRn4SWiw3te5djgdYZ6k/oI2peVKVuRF4fn9tBb6dNqcmzU5L/qw
IFAGbHrQgLKm+a/sRxmPUDgH3KKHOVj4utWp+UhnMJbulHheb4mjUcAwhmahRWa6
VOujw5H5SNz/0egwLX0tdHA114gk957EWW67c4cX8jJGKLhD+rcdqsq08p8kDi1L
93FcXmn/6pUCyziKrlA4b9v7LWIbxcceVOF34GfID5yHI9Y/QCB/IIDEgEw+OyQm
jgSubJrIqg0CAwEAAaNCMEAwDwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8EBAMC
AYYwHQYDVR0OBBYEFIQYzIU07LwMlJQuCFmcx7IQTgoIMA0GCSqGSIb3DQEBCwUA
A4IBAQCY8jdaQZChGsV2USggNiMOruYou6r4lK5IpDB/G/wkjUu0yKGX9rbxenDI
U5PMCCjjmCXPI6T53iHTfIUJrU6adTrCC2qJeHZERxhlbI1Bjjt/msv0tadQ1wUs
N+gDS63pYaACbvXy8MWy7Vu33PqUXHeeE6V/Uq2V8viTO96LXFvKWlJbYK8U90vv
o/ufQJVtMVT8QtPHRh8jrdkPSHCa2XV4cdFyQzR1bldZwgJcJmApzyMZFo6IQ6XU
5MsI+yMRQ+hDKXJioaldXgjUkK642M4UwtBV8ob2xJNDd2ZhwLnoQdeXeGADbkpy
rqXRfboQnoZsG4q5WTP468SQvvG5
-----END CERTIFICATE-----
)EOF";

const char CERTIFICATE[] PROGMEM = R"KEY(
-----BEGIN CERTIFICATE-----
MIIDWTCCAkGgAwIBAgIUassfeLH7GBWRVAnJttwILaulSjMwDQYJKoZIhvcNAQEL
BQAwTTFLMEkGA1UECwxCQW1hem9uIFdlYiBTZXJ2aWNlcyBPPUFtYXpvbi5jb20g
SW5jLiBMPVNlYXR0bGUgU1Q9V2FzaGluZ3RvbiBDPVVTMB4XDTI1MDUyODA2Mzkw
MloXDTQ5MTIzMTIzNTk1OVowHjEcMBoGA1UEAwwTQVdTIElvVCBDZXJ0aWZpY2F0
ZTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBANxT/xTpWQtfQzQQjG1c
jlq8huS9RX+byLEu4P2Jbvg+9ZsFzFzYTIegdtGG+ZdjuodhyfAvx8oGjCQ7JGjH
2wkyL5EyRM+fW5lxPQfnLY2aLcB9+pPAJ7ecpgIkft0ecuA5apnrSduMPJQbz/Yq
QVMq1xE59RMjGPPVjftr6n8ow9fGzmpn90SZtGOx0bYoSi2v7ihEpIdBQ/09LQ7d
qJmqzJmoLtnzqsR+RhxyErUCOLtfCuzOiCEUQRmjfl8zwosqFiAaQnbTGpJVrlwU
dBmJKpWWBaUWmz8KtMFE9H/ADpS8KPuQFJdz3RXM5MV2rJAfp5JIk9H8ZpYQEAyy
pGkCAwEAAaNgMF4wHwYDVR0jBBgwFoAU1Xuzq5hLBX3J2q32R6kRtMq75hkwHQYD
VR0OBBYEFHlYWXZHz0PSuBIFqAaaeh8RyII0MAwGA1UdEwEB/wQCMAAwDgYDVR0P
AQH/BAQDAgeAMA0GCSqGSIb3DQEBCwUAA4IBAQAuITZflvr3xoaLk+bXFTNH4XyC
Q4xejn3nAYE+F8gvyMwxq3swWP1iOb3EqUP1+xfdXoYBiacTuOTHChRxqvoB5h1l
JHbnYOgD9Jygtx818KGtQEaUaUwal9APs5NsSmdqBACEsPu/7TGeW6T7bd+srxiR
4v+2Bu64bOe5AUQ5DjDAXCSoGMv5gJlbnHNI4O6hPuhKEbfSUH0g3B2VIYMFlv51
XUaQzPFyKQPaKmXFLtd43tSQCWmKktj+xaQnpeVQbXQSUx9t48HJvPVXxkrMW+Ff
QN71+zFFvKT6ZuW7Bw2+QTHH6YuCsxffqJ6ukw0eb1LbYj+dPxMWn9Ot23xq
-----END CERTIFICATE-----
)KEY";

const char PRIVATE_KEY[] PROGMEM = R"KEY(
-----BEGIN RSA PRIVATE KEY-----
MIIEpgIBAAKCAQEA3FP/FOlZC19DNBCMbVyOWryG5L1Ff5vIsS7g/Ylu+D71mwXM
XNhMh6B20Yb5l2O6h2HJ8C/HygaMJDskaMfbCTIvkTJEz59bmXE9B+ctjZotwH36
k8Ant5ymAiR+3R5y4DlqmetJ24w8lBvP9ipBUyrXETn1EyMY89WN+2vqfyjD18bO
amf3RJm0Y7HRtihKLa/uKESkh0FD/T0tDt2omarMmagu2fOqxH5GHHIStQI4u18K
7M6IIRRBGaN+XzPCiyoWIBpCdtMaklWuXBR0GYkqlZYFpRabPwq0wUT0f8AOlLwo
+5AUl3PdFczkxXaskB+nkkiT0fxmlhAQDLKkaQIDAQABAoIBAQC0FF8ve03RMqpd
2oy8MeMUHHTwbhZopy5QSy2PbA3sDqF1dDbFR/C9BZU3yeckKlnhnzaK/rJ/1/wg
/MnUbk0DZiZkuT5uqCQY9OnaFMQxsWtlolH1AyAzPXCd3bBnECT6SVNsvFegfy1g
LJ875ut/i0s/BCzf2FbjrI8giOKfzHBiXuyyZpEC/DKCE/kcUmLDnwEVzmkrh88a
Fn79lmlb094LCFTlwCWy1OedfdKGNTpuDmnYexDcP5OcWwUvxUuM9bBCsKaW2CzT
07CuBjQ/UpW3jHxJCsWgfal0dyzdFsFplPBV/YU6WA+4XUgHe1nE7hA9vY5nB6lu
XrURxaWFAoGBAPUOhxg0eMkQZKVm8o8sUBTZuXC38DDNXiQU4xzvJjjq6A7UMLhl
DSbtCZrTDn1Hg2CzsNJT2ncq8Q83WsZjeMMLriIL8h7XX9WuHDIakRJ2xo3vbh5h
nAvTuMIkp9LVdAeWCP7TqvM/fINvivQ+UD87qoWDdK0UnOUQ/1EbRldfAoGBAOYq
xcdXu1j/2EvBBzhUHmaN2tphrxXvDm0ix6o4dO25c2bY1cp5rLjn10M+2UNKowsm
9ObYI+BLABeOL378ssa1t8YtVsryS3RvdKecGXekRDcUepg2YiPQOQsYX72XaUdW
En8fG1D0fpfDYKJ+Xmtg7qKFIk8RWBE2V1LW0YE3AoGBAOYNIV3jxJBcx19Pad5m
pzcrvh7HTsFBymLtCNic2bENNZTWNnakxtgIJsAl6rBJdlhN2G1bMvg0Y+D5AkrE
DxZr3KkxtbamUd1zehy/O/mtb3DHmQUEdU3VENmRN8uBf0+v1foEE7QPoYByMmxg
I015Yfe9FMd3VmLktgsaI8rZAoGBALpWTHIbG6hs0G5b4n1+1HHQTCraRIXsWHCQ
ZLbxJ/DBX6UWzNYz9VppD4P4YKoyxZakvkYZG8pczcFEMj2LVSy8NwCw+gApcl7c
UMPVA2UxzqwM30dVV9SIoXXTEMeLygafry/NPi8nEUnKOfSze7tQ6UEXqXP7paGh
rcZ59Xi3AoGBAND4eW2jtXWwAqn4WSveQ5jKz6dnviaNAgZKfu2cPJL/Vl9vhyVh
nV+9Xxiuzru2gLDkMWPvhiV/NMP46eNPFCjLdyRAQIGekwvnVNvRigQIu++XSYaF
hKIhNPsOLc5oX8inkQ47juNiAPI/7oHQxHOqFBJCi6AGJdVfsnkMYtoz
-----END RSA PRIVATE KEY-----
)KEY";

// Replace with your think shadow details
const char* UPDATE_TOPIC = "$aws/things/smart_dispenser_SN00001/shadow/update";          // publish changeMe

WiFiClientSecure wiFiClient;
PubSubClient client(wiFiClient);

StaticJsonDocument<JSON_OBJECT_SIZE(64)> inputDoc;
StaticJsonDocument<JSON_OBJECT_SIZE(4)> outputDoc;
char outputBuffer[128];

String Weight = "nothing";
String PastWeight = "X";

void reportLedBuiltIn() {
  outputDoc["state"]["reported"]["weight"] = Weight;
  serializeJson(outputDoc, outputBuffer);
  client.publish(UPDATE_TOPIC, outputBuffer);
}



void setup() {
  Serial.begin(115200);
  pinMode(TRIGGER_PIN, OUTPUT);
  pinMode(ECHO_PIN, INPUT);
  setupWiFi();

  wiFiClient.setCACert(AMAZON_ROOT_CA1);
  wiFiClient.setCertificate(CERTIFICATE);
  wiFiClient.setPrivateKey(PRIVATE_KEY);

  client.setServer(MQTT_BROKER, MQTT_PORT);
}

void setupWiFi() {
  delay(10);
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(WIFI_SSID);

  WiFi.begin(WIFI_SSID, WIFI_PASS);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  
  Serial.println();
  Serial.print("Connected to WiFi. IP address: ");
  Serial.println(WiFi.localIP());
}

void reconnect() {
  // Loop until we're reconnected
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    // Attempt to connect
    if (client.connect(CLIENT_ID)) {
      Serial.println("connected");
      delay(100);
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" trying again in 5 seconds");
      // Wait 5 seconds before retrying
      delay(5000);
    }
  }
}

void loop() {
  if (!client.connected()) {
    reconnect();
  }
  client.loop();
  float distancia = medirDistanciaCM();   // Mide la distancia
  mostrarDistancia(distancia);           // Muestra por Serial
  Weight = classifyValue(distancia);
  Serial.print(Weight);
  if(PastWeight != "X" && PastWeight != Weight)
  {
    reportLedBuiltIn();
  }
  PastWeight = Weight;
  delay(5000);
}
